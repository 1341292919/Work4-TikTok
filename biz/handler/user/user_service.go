// Code generated by hertz generator.

package user

import (
	"TikTok/biz/middleware/jwt"
	user "TikTok/biz/model/user"
	"TikTok/biz/pack"
	"TikTok/biz/service"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.RegisterResponse)

	err = service.NewUserService(ctx, c).Register(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.LoginResponse)
	UserResp, err := service.NewUserService(ctx, c).Login(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	jwt.AccessTokenJwtMiddleware.LoginHandler(ctx, c)
	jwt.RefreshTokenJwtMiddleware.LoginHandler(ctx, c)

	c.Header("Access-Token", c.GetString("Access-Token"))
	c.Header("Refresh-Token", c.GetString("Refresh-Token"))
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.User(UserResp)
	pack.SendResponse(c, resp)
}

// UploadAvatar .
// @router /user/avatar/upload [PUT]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	data, err := c.FormFile("data")

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.UploadAvatarResponse)
	userResp, err := service.NewUserService(ctx, c).UploadAvatar(data)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Data = pack.User(userResp)
	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// GetInformation .
// @router /user/info [GET]
func GetInformation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserInformationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.GetUserInformationResponse)
	UserResp, err := service.NewUserService(ctx, c).GetUserInformation(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.User(UserResp)
	pack.SendResponse(c, resp)
}

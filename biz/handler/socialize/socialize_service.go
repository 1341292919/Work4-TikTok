// Code generated by hertz generator.

package socialize

import (
	"TikTok/biz/pack"
	"TikTok/biz/service"
	"context"

	socialize "TikTok/biz/model/socialize"
	"github.com/cloudwego/hertz/pkg/app"
)

// Follow .
// @router /socialize/follow [POST]
func Follow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.FollowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(socialize.FollowResponse)
	err = service.NewSocializeService(ctx, c).FollowUser(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// QueryFollowList .
// @router /socialize/query/follow [GET]
func QueryFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.QueryFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(socialize.QueryFollowListResponse)
	userList, count, err := service.NewSocializeService(ctx, c).QueryFollowList(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.SimpleUserList(userList, count)
	pack.SendResponse(c, resp)
}

// QueryFollowerList .
// @router /socialize/query/follower [GET]
func QueryFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.QueryFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(socialize.QueryFollowerListResponse)

	userList, count, err := service.NewSocializeService(ctx, c).QueryFollowerList(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.SimpleUserList(userList, count)
	pack.SendResponse(c, resp)
}

// QueryFriendList .
// @router /socialize/query/friend [GET]
func QueryFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req socialize.QueryFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(socialize.QueryFriendListResponse)

	userList, count, err := service.NewSocializeService(ctx, c).QueryFriendList(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.SimpleUserList(userList, count)
	pack.SendResponse(c, resp)
}

// Code generated by hertz generator.

package video

import (
	"TikTok/biz/pack"
	"TikTok/biz/service"
	"context"

	video "TikTok/biz/model/video"
	"github.com/cloudwego/hertz/pkg/app"
)

// PublishVideo .
// @router /video/publish [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PublishRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	data, err := c.FormFile("data")
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(video.PublishResponse)
	err = service.NewVideoService(ctx, c).UploadVideo(data, &req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// QueryList .
// @router /video/query [GET]
func QueryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.QueryPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(video.QueryPublishListResponse)
	VideoResp, count, err := service.NewVideoService(ctx, c).QueryPublishedVideo(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.VideoList(VideoResp, count)
	pack.SendResponse(c, resp)

}

// SearchVideo .
// @router /video/search [GET]
func SearchVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.SearchVideoByKeywordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(video.SearchVideoByKeywordResponse)
	VideoResp, count, err := service.NewVideoService(ctx, c).QueryVideoByKeyword(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.VideoList(VideoResp, count)
	pack.SendResponse(c, resp)
}

// GetPopularVideo .
// @router /video/popular [GET]
func GetPopularVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.GetPopularListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(video.GetPopularListResponse)

	VideoResp, count, err := service.NewVideoService(ctx, c).QueryVideoByPopularity(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.VideoList(VideoResp, count)
	pack.SendResponse(c, resp)
}
